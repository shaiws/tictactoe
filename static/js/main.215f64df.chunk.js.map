{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","HandleClick","e","clicked","target","id","split","x","y","updateGameState","state","gameState","winner","currentPlayer","setState","moveCount","checkWinning","Table","board","i","cell","k","push","react_default","a","createElement","key","onClick","border","className","turn","s","alert","align","dir","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.215f64df.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      gameState: [\n        [\"\",\"\",\"\"],\n        [\"\",\"\",\"\"],\n        [\"\",\"\",\"\"],\n      ],\n      currentPlayer: true,\n      moveCount: 0,\n      winner: false\n    }\n  }\n  HandleClick = e => {\n    const clicked = (e.target.id).split(',')\n    const x=clicked[0]-1\n    const y = clicked[1]-1\n    let updateGameState = this.state.gameState\n    if (this.state.gameState[x][y]== \"\" && !this.state.winner){\n      this.state.currentPlayer ? updateGameState[x][y] = \"X\" : updateGameState[x][y] = \"O\"\n    this.setState({\n      gameState:updateGameState,\n      currentPlayer: !this.state.currentPlayer,\n      moveCount: this.state.moveCount+1\n    })\n    this.checkWinning(x,y,this.state.currentPlayer)\n  }\n\n  }\n  checkWinning(x,y,turn){\n    let s = \"X\"\n    turn ? s = \"X\" : s= \"O\"\n    const board = this.state.gameState\n    //check col\n    for(let i = 0; i < 3; i++){\n      if(board[x][i] !== s)\n          break;\n      if(i === 3-1){\n          alert(\"Winner is \"+s)\n          this.setState({\n            winner: true\n          })\n      }\n  }\n\n  //check row\n  for(let i = 0; i < 3; i++){\n      if(board[i][y] !== s)\n          break;\n      if(i === 3-1){\n        alert(\"Winner is \"+s)\n        this.setState({\n          winner: true\n        })\n      }\n  }\n\n  //check diag\n  if(x === y){\n      //we're on a diagonal\n      for(let i = 0; i < 3; i++){\n          if(board[i][i] !== s)\n              break;\n          if(i === 3-1){\n            alert(\"Winner is \"+s)\n            this.setState({\n              winner: true\n            })\n          }\n      }\n  }\n\n  //check anti diag (thanks rampion)\n  if(x + y === 3 - 1){\n      for(let i = 0; i < 3; i++){\n          if(board[i][(3-1)-i] !== s)\n              break;\n          if(i === 3-1){\n            alert(\"Winner is \"+s)\n            this.setState({\n              winner: true\n            })\n          }\n      }\n  }\n    if (!this.state.winner && this.state.moveCount === 8){\n      alert(\"TIE!\")\n    }\n  }\n  \n Table = () => {\n   const board = []\n   for (let i = 1; i< 4; i++) {\n     const cell = []\n     for (let k = 1; k < 4; k++) {\n       cell.push(<td key={i*k} id={i+\",\"+k} onClick={this.HandleClick}>{this.state.gameState[i-1][k-1]}</td>)\n     }\n     board.push(<tr key= {i*100}>{cell}</tr>)    \n   }\n   return (\n     <table border=\"2cm\" className=\"table\">\n       <tbody>\n         {board}\n      </tbody>\n     </table>\n   );\n}\nrender() {\n    return (\n      <div align=\"center\" className=\"App\">\n      <h1 dir= \"rtl\">משחק XO מעפן</h1>\n        <this.Table/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}